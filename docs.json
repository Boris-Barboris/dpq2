[
	{
		"file": "src/dpq2/connection.d",
		"name": "dpq2.connection",
		"members": [
			{
				"name": "ConnectionStart",
				"line": 40,
				"comment": "dumb flag for Connection ctor parametrization\n",
				"members": [],
				"char": 1,
				"kind": "struct"
			},
			{
				"name": "Connection",
				"line": 43,
				"comment": "Connection\n",
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 53,
						"comment": "Makes a new connection to the database server\n",
						"deco": "FAyaZC4dpq210connection10Connection",
						"parameters": [
							{
								"name": "connString",
								"deco": "Aya"
							}
						],
						"endline": 61,
						"originalType": "(string connString)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "this",
						"line": 64,
						"comment": "Starts creation of a connection to the database server in a nonblocking manner\n",
						"deco": "FS4dpq210connection15ConnectionStartAyaZCQBnQBl10Connection",
						"parameters": [
							{
								"name": "_param_0",
								"deco": "S4dpq210connection15ConnectionStart"
							},
							{
								"name": "connString",
								"deco": "Aya"
							}
						],
						"endline": 72,
						"originalType": "(ConnectionStart, string connString)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "isNonBlocking",
						"line": 82,
						"comment": "Returns the blocking status of the database connection\n",
						"deco": "FZb",
						"endline": 85,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "resetStart",
						"line": 97,
						"comment": "Begin reset the communication channel to the server, in a nonblocking manner\n\nUseful only for non-blocking operations.\n",
						"deco": "FZv",
						"endline": 101,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "poll",
						"line": 104,
						"comment": "Useful only for non-blocking operations.\n",
						"deco": "FNbZi",
						"endline": 109,
						"originalType": "nothrow PostgresPollingStatusType()",
						"char": 31,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "resetPoll",
						"line": 112,
						"comment": "Useful only for non-blocking operations.\n",
						"deco": "FNbZi",
						"endline": 117,
						"originalType": "nothrow PostgresPollingStatusType()",
						"char": 31,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "status",
						"line": 120,
						"comment": "Returns the status of the connection\n",
						"deco": "FNbZi",
						"endline": 123,
						"originalType": "nothrow ConnStatusType()",
						"char": 20,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "consumeInput",
						"line": 128,
						"comment": "If input is available from the server, consume it\n\nUseful only for non-blocking operations.\n",
						"deco": "FZv",
						"endline": 134,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "posixSocket",
						"line": 146,
						"comment": "Obtains the file descriptor number of the connection socket to the server\n",
						"deco": "FZi",
						"endline": 154,
						"char": 9,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "posixSocketDuplicate",
						"line": 157,
						"comment": "Obtains duplicate file descriptor number of the connection socket to the server\n",
						"deco": "FZE3std6socket8socket_t",
						"endline": 169,
						"char": 14,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "socket",
						"line": 175,
						"comment": "Obtains std.socket.Socket of the connection to the server\n\nDue to a limitation of Socket actually for the Socket creation\nduplicate of internal posix socket will be used.\n",
						"deco": "FZC3std6socket6Socket",
						"endline": 178,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "errorMessage",
						"line": 181,
						"comment": "Returns the error message most recently generated by an operation on the connection\n",
						"deco": "xFNbZAya",
						"endline": 184,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "setNoticeProcessor",
						"line": 192,
						"comment": " Sets or examines the current notice processor\n\n Returns the previous notice receiver or processor function pointer, and sets the new value.\n If you supply a null function pointer, no action is taken, but the current pointer is returned.\n",
						"deco": "FNbPUNbNiPvPaZvQgZQp",
						"parameters": [
							{
								"name": "proc",
								"deco": "PUNbNiPvPaZv"
							},
							{
								"name": "arg",
								"deco": "Pv"
							}
						],
						"endline": 197,
						"originalType": "nothrow PQnoticeProcessor(PQnoticeProcessor proc, void* arg)",
						"char": 23,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "getResult",
						"line": 202,
						"comment": "Get next result after sending a non-blocking commands. Can return null.\n\nUseful only for non-blocking operations.\n",
						"deco": "FZyC4dpq26result6Result",
						"endline": 214,
						"char": 23,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "setSingleRowMode",
						"line": 225,
						"comment": "Select single-row mode for the currently-executing query\n",
						"deco": "FZb",
						"endline": 228,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "cancel",
						"line": 238,
						"comment": "     Try to cancel query\n\n     If the cancellation is effective, the current command will\n     terminate early and return an error result or exception. If the\n     cancellation will fails (say, because the server was already done\n     processing the command) there will be no visible result at all.\n",
						"deco": "FZv",
						"endline": 242,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "isBusy",
						"line": 245,
						"comment": "\n",
						"deco": "FNbZb",
						"endline": 250,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "parameterStatus",
						"line": 253,
						"comment": "\n",
						"deco": "FAyaZQe",
						"parameters": [
							{
								"name": "paramName",
								"deco": "Aya"
							}
						],
						"endline": 263,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "escapeLiteral",
						"line": 266,
						"comment": "\n",
						"deco": "FAyaZQe",
						"parameters": [
							{
								"name": "msg",
								"deco": "Aya"
							}
						],
						"endline": 280,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "escapeIdentifier",
						"line": 283,
						"comment": "\n",
						"deco": "FAyaZQe",
						"parameters": [
							{
								"name": "msg",
								"deco": "Aya"
							}
						],
						"endline": 297,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "dbName",
						"line": 300,
						"comment": "\n",
						"deco": "xFNbZAya",
						"endline": 305,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "host",
						"line": 308,
						"comment": "\n",
						"deco": "xFNbZAya",
						"endline": 313,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "protocolVersion",
						"line": 316,
						"comment": "\n",
						"deco": "xFNbZi",
						"endline": 321,
						"char": 9,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "serverVersion",
						"line": 324,
						"comment": "\n",
						"deco": "xFNbZi",
						"endline": 329,
						"char": 9,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "trace",
						"line": 332,
						"comment": "\n",
						"deco": "FKS3std5stdio4FileZv",
						"parameters": [
							{
								"name": "stream",
								"storageClass": [
									"ref"
								],
								"deco": "S3std5stdio4File"
							}
						],
						"endline": 335,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "untrace",
						"line": 338,
						"comment": "\n",
						"deco": "FZv",
						"endline": 341,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "setClientEncoding",
						"line": 344,
						"comment": "\n",
						"deco": "FAyaZv",
						"parameters": [
							{
								"name": "encoding",
								"deco": "Aya"
							}
						],
						"endline": 348,
						"char": 10,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "class"
			},
			{
				"endchar": 1,
				"name": "connStringCheck",
				"line": 354,
				"comment": "Check connection options in the provided connection string\n\nThrows exception if connection string isn't passes check.\n",
				"deco": "FAyaZv",
				"parameters": [
					{
						"name": "connString",
						"deco": "Aya"
					}
				],
				"endline": 375,
				"char": 6,
				"kind": "function"
			},
			{
				"name": "Cancellation",
				"line": 394,
				"comment": "Represents query cancellation process\n",
				"members": [
					{
						"endchar": 5,
						"name": "doCancel",
						"line": 423,
						"comment": "     Requests that the server abandon processing of the current command\n\n     Throws exception if cancel request was not successfully dispatched.\n\n     Successful dispatch is no guarantee that the request will have any\n     effect, however. If the cancellation is effective, the current\n     command will terminate early and return an error result\n     (exception). If the cancellation fails (say, because the server\n     was already done processing the command), then there will be no\n     visible result at all.\n",
						"deco": "FZv",
						"endline": 430,
						"char": 10,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "class"
			},
			{
				"members": [],
				"name": "CancellationException",
				"line": 434,
				"comment": "\n",
				"base": "dpq2.exception.Dpq2Exception",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [],
				"name": "ConnectionException",
				"line": 443,
				"comment": "Connection exception\n",
				"base": "dpq2.exception.Dpq2Exception",
				"char": 1,
				"kind": "class"
			}
		],
		"comment": " Represents connection to the PostgreSQL server\n\n Most functions is correspond to those in the documentation of Postgres:\n $(HTTPS https://www.postgresql.org/docs/current/static/libpq.html)\n",
		"kind": "module"
	},
	{
		"file": "src/dpq2/conv/numeric.d",
		"name": "dpq2.conv.numeric",
		"members": [],
		"comment": "   PostgreSQL numeric format\n\n   Copyright: © 2014 DSoftOut\n   Authors: NCrashed <ncrashed@gmail.com>\n",
		"kind": "module"
	},
	{
		"file": "src/dpq2/conv/time.d",
		"name": "dpq2.conv.time",
		"members": [
			{
				"members": [
					{
						"endchar": 1,
						"name": "binaryValueAs",
						"line": 30,
						"type": "@trusted SysTime(in Value v)",
						"parameters": [
							{
								"name": "v",
								"type": "Value",
								"storageClass": [
									"in"
								]
							}
						],
						"endline": 42,
						"char": 9,
						"kind": "function"
					}
				],
				"name": "binaryValueAs",
				"line": 30,
				"comment": "    Returns value timestamp with time zone as SysTime\n    Note that SysTime has a precision in hnsecs and PG TimeStamp in usecs.\n    It means that PG value will have 10 times lower precision.\n    And as both types are using long for internal storage it also means that PG TimeStamp can store greater range of values than SysTime.\n\n    Because of these differences, it can happen that database value will not fit to the SysTime range of values.\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(T == SysTime)",
				"char": 9,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "binaryValueAs",
						"line": 47,
						"type": "@trusted Date(in Value v)",
						"parameters": [
							{
								"name": "v",
								"type": "Value",
								"storageClass": [
									"in"
								]
							}
						],
						"endline": 62,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "binaryValueAs",
				"line": 47,
				"comment": "Returns value data as native Date\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(T == Date)",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "binaryValueAs",
						"line": 65,
						"type": "@trusted TimeOfDay(in Value v)",
						"parameters": [
							{
								"name": "v",
								"type": "Value",
								"storageClass": [
									"in"
								]
							}
						],
						"endline": 76,
						"char": 11,
						"kind": "function"
					}
				],
				"name": "binaryValueAs",
				"line": 65,
				"comment": "Returns value time without time zone as native TimeOfDay\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(T == TimeOfDay)",
				"char": 11,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "binaryValueAs",
						"line": 79,
						"type": "@trusted TimeStamp(in Value v)",
						"parameters": [
							{
								"name": "v",
								"type": "Value",
								"storageClass": [
									"in"
								]
							}
						],
						"endline": 92,
						"char": 11,
						"kind": "function"
					}
				],
				"name": "binaryValueAs",
				"line": 79,
				"comment": "Returns value timestamp without time zone as TimeStamp\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(T == TimeStamp)",
				"char": 11,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "binaryValueAs",
						"line": 95,
						"type": "@trusted TimeStampUTC(in Value v)",
						"parameters": [
							{
								"name": "v",
								"type": "Value",
								"storageClass": [
									"in"
								]
							}
						],
						"endline": 108,
						"char": 14,
						"kind": "function"
					}
				],
				"name": "binaryValueAs",
				"line": 95,
				"comment": "Returns value timestamp with time zone as TimeStampUTC\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(T == TimeStampUTC)",
				"char": 14,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "binaryValueAs",
						"line": 111,
						"type": "@trusted DateTime(in Value v)",
						"parameters": [
							{
								"name": "v",
								"type": "Value",
								"storageClass": [
									"in"
								]
							}
						],
						"endline": 115,
						"char": 10,
						"kind": "function"
					}
				],
				"name": "binaryValueAs",
				"line": 111,
				"comment": "Returns value timestamp without time zone as DateTime (it drops the fracSecs from the database value)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(T == DateTime)",
				"char": 10,
				"kind": "template"
			},
			{
				"name": "TimeStamp",
				"line": 153,
				"comment": "Unknown TZ timestamp\n",
				"deco": "S4dpq24conv4time__T10TTimeStampVbi0ZQr",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "TimeStampUTC",
				"line": 154,
				"comment": "Assumed that this is UTC timestamp\n",
				"deco": "S4dpq24conv4time__T10TTimeStampVbi1ZQr",
				"char": 1,
				"kind": "alias"
			}
		],
		"comment": "   PostgreSQL time types binary format.\n\n   Copyright: © 2014 DSoftOut\n   Authors: NCrashed <ncrashed@gmail.com>\n",
		"kind": "module"
	},
	{
		"file": "src/dpq2/oids.d",
		"name": "dpq2.oids",
		"members": [
			{
				"members": [
					{
						"endchar": 1,
						"name": "oidConvTo",
						"line": 20,
						"type": "OidType(OidType type)",
						"parameters": [
							{
								"name": "type",
								"type": "OidType"
							}
						],
						"endline": 47,
						"char": 9,
						"kind": "function"
					}
				],
				"name": "oidConvTo",
				"line": 20,
				"comment": "Convert between array Oid and element Oid or vice versa\n",
				"parameters": [
					{
						"name": "s",
						"deco": "Aya",
						"kind": "value"
					}
				],
				"char": 9,
				"kind": "template"
			},
			{
				"members": [],
				"name": "OidType",
				"line": 177,
				"comment": "Enum of Oid types defined in PG\n",
				"baseDeco": "k",
				"char": 8,
				"kind": "enum"
			}
		],
		"comment": "   PostgreSQL major types oids.\n\n   Copyright: © 2014 DSoftOut\n   Authors: NCrashed <ncrashed@gmail.com>\n",
		"kind": "module"
	},
	{
		"file": "src/dpq2/query.d",
		"name": "dpq2.query",
		"members": [
			{
				"members": [
					{
						"endchar": 5,
						"name": "exec",
						"line": 18,
						"comment": "Perform SQL query to DB\n",
						"type": "immutable(Answer)(string SQLcmd)",
						"parameters": [
							{
								"name": "SQLcmd",
								"type": "string"
							}
						],
						"endline": 26,
						"char": 24,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "execParams",
						"line": 29,
						"comment": "Perform SQL query to DB\n",
						"type": "immutable(Answer)(ref QueryParams qp)",
						"parameters": [
							{
								"name": "qp",
								"type": "QueryParams",
								"storageClass": [
									"in",
									"ref"
								]
							}
						],
						"endline": 47,
						"char": 24,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "sendQuery",
						"line": 50,
						"comment": "Submits a command to the server without waiting for the result(s)\n",
						"type": "void(string SQLcmd)",
						"parameters": [
							{
								"name": "SQLcmd",
								"type": "string"
							}
						],
						"endline": 54,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "sendQueryParams",
						"line": 57,
						"comment": "Submits a command and separate parameters to the server without waiting for the result(s)\n",
						"type": "void(ref QueryParams qp)",
						"parameters": [
							{
								"name": "qp",
								"type": "QueryParams",
								"storageClass": [
									"in",
									"ref"
								]
							}
						],
						"endline": 72,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "sendQueryPrepared",
						"line": 75,
						"comment": "Sends a request to execute a prepared statement with given parameters, without waiting for the result(s)\n",
						"type": "void(ref QueryParams qp)",
						"parameters": [
							{
								"name": "qp",
								"type": "QueryParams",
								"storageClass": [
									"in",
									"ref"
								]
							}
						],
						"endline": 89,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "getNextNotify",
						"line": 92,
						"comment": "Returns null if no notifies was received\n",
						"type": "Notify()",
						"endline": 97,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "prepare",
						"line": 101,
						"comment": "Submits a request to create a prepared statement with the given parameters, and waits for completion.\nReturns: Result of query preparing\n",
						"type": "immutable(Result)(string statementName, string sqlStatement, in Oid[] oids = null)",
						"parameters": [
							{
								"name": "statementName",
								"type": "string"
							},
							{
								"name": "sqlStatement",
								"type": "string"
							},
							{
								"name": "oids",
								"type": "Oid[]",
								"storageClass": [
									"in"
								],
								"default": "null"
							}
						],
						"endline": 115,
						"char": 23,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "prepareEx",
						"line": 120,
						"comment": "Submits a request to create a prepared statement with the given parameters, and waits for completion.\n\nThrows an exception if preparing failed.\n",
						"type": "void(string statementName, string sqlStatement, in Oid[] oids = null)",
						"parameters": [
							{
								"name": "statementName",
								"type": "string"
							},
							{
								"name": "sqlStatement",
								"type": "string"
							},
							{
								"name": "oids",
								"type": "Oid[]",
								"storageClass": [
									"in"
								],
								"default": "null"
							}
						],
						"endline": 126,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "execPrepared",
						"line": 129,
						"comment": "Submits a request to execute a prepared statement with given parameters, and waits for completion.\n",
						"type": "immutable(Answer)(ref QueryParams qp)",
						"parameters": [
							{
								"name": "qp",
								"type": "QueryParams",
								"storageClass": [
									"in",
									"ref"
								]
							}
						],
						"endline": 146,
						"char": 23,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "sendPrepare",
						"line": 149,
						"comment": "Sends a request to create a prepared statement with the given parameters, without waiting for completion.\n",
						"type": "void(string statementName, string sqlStatement, in Oid[] oids = null)",
						"parameters": [
							{
								"name": "statementName",
								"type": "string"
							},
							{
								"name": "sqlStatement",
								"type": "string"
							},
							{
								"name": "oids",
								"type": "Oid[]",
								"storageClass": [
									"in"
								],
								"default": "null"
							}
						],
						"endline": 160,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "waitEndOf",
						"line": 182,
						"comment": "Waiting for completion of reading or writing\nReturn: timeout not occured\n",
						"type": "bool(WaitType type, Duration timeout = Duration.zero)",
						"parameters": [
							{
								"name": "type",
								"type": "WaitType"
							},
							{
								"name": "timeout",
								"type": "Duration",
								"default": "Duration.zero"
							}
						],
						"endline": 225,
						"char": 10,
						"kind": "function"
					}
				],
				"name": "Queries",
				"line": 15,
				"comment": "Extends Connection by adding query methods\n",
				"parameters": [],
				"char": 7,
				"kind": "template"
			}
		],
		"comment": "Query methods\n",
		"kind": "module"
	}
]